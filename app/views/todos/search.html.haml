- content_for :page_header do
  %h1{:style => "color:darkBlue;"}
    %span= "Search"
    %br
    #stats_todos
      = render 'stats_todos'
  = form_tag search_todos_path, :id => 'todos_form', :method => :get, :class => "form-inline" do
    = hidden_field_tag :pattern, params[:pattern]
    %select{:id => "filter_project", :name => "filter_project"}
      %option{:value => 0, :selected => (params[:filter_project].to_i == 0 ? 'selected' : nil)}= "All projects"
      - @projects.each do |s|
        %option{:value => s.id, :selected =>  (params[:filter_project].to_i == s.id ? 'selected' : nil)}= "#{s.name}"
    %select{:id => "filter_status", :name => "filter_status"}
      %option{:value => 0, :selected => (params[:filter_status].to_i == 0 ? 'selected' : nil)}= "All statuses"
      - @statuses.each do |s|
        %option{:value => s.id, :selected =>  (params[:filter_status].to_i == s.id ? 'selected' : nil)}= "#{s.name}"
    %select{:id => "exclude_status", :name => "exclude_status"}
      %option{:value => 0, :selected => (params[:exclude_status].to_i == 0 ? 'selected' : nil)}= "No excluded status"
      - @statuses.each do |s|
        %option{:value => s.id, :selected =>  (params[:exclude_status].to_i == s.id ? 'selected' : nil)}= "#{s.name}"
    = submit_tag 'Filter', :class => "btn btn-primary"
    = submit_tag 'Filter without search', :class => "btn btn-primary"

- if @count_todos_total != 0
  %table{:class => "table table-striped table-bordered table-condensed", :id => "sortableTable"}
    = render 'table_todos'
:javascript
  $('#filter_project').bind('change', function(eventData) {
    $('#todos_form').submit();
  });
  $('#filter_status').bind('change', function(eventData) {
    $('#todos_form').submit();
  });
  $('#exclude_status').bind('change', function(eventData) {
    $('#todos_form').submit();
  });
  $.tablesorter.addParser({
    // set a unique id
    id: 'statuses',
    is: function(s) {
        // return false so this parser is not auto detected
        return false;
    },
    format: function(s) {
        // format your data for normalization
        /*return s.#{
          array = (0...@statuses.length).to_a
          array.map{ |i| "replace(/#{@statuses[i].name}/, '#{@statuses[i].position}')" }.join '.'
        }*/
        return s.substr(0, s.indexOf(';'));
    },
    // set type, either numeric or text
    type: 'numeric'
  });
  $.tablesorter.addParser({
    // set a unique id
    id: 'types',
    is: function(s) {
        // return false so this parser is not auto detected
        return false;
    },
    format: function(s) {
        // format your data for normalization
        return s.substr(0, s.indexOf(';'));
    },
    // set type, either numeric or text
    type: 'numeric'
  });
  $.tablesorter.addParser({
    // set a unique id
    id: 'minutes',
    is: function(s) {
        // return false so this parser is not auto detected
        return false;
    },
    format: function(s) {
        // format your data for normalization
        //return s.toLowerCase().replace(/minutes/,'');
        return s.substring(0, s.indexOf(';'));
    },
    // set type, either numeric or text
    type: 'numeric'
  });
  $(function() {
    $("table#sortableTable").tablesorter({
      widgets: ["saveSort", "resizable"],
      headers: {
        4: {sorter: 'statuses'},
        5: {sorter: 'types'},
        6: {sorter: 'minutes'},
        7: {sorter: 'minutes'},
        #{
          array = (1..3).to_a.reverse
          array.map{ |i| "#{16-i}: {sorter: false}" }.join ',\n'
        }
      }
    });
  });
  $(".page-header").css("backgroundColor", "#D9E9FF");

